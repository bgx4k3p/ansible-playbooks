---
- name: Install and Update Portainer CE with Docker
  hosts: '{{ target_hosts }}'
  become: true

  vars:
    portainer_image: portainer/portainer-ce
    portainer_tag: latest
    portainer_container_name: portainer
    portainer_http_port: 8000
    portainer_https_port: 9443
    portainer_data_volume: portainer_data
    docker_socket: /var/run/docker.sock

  tasks:

    - name: Pull latest Portainer image
      docker_image:
        name: "{{ portainer_image }}"
        tag: "{{ portainer_tag }}"
        source: pull
        force_source: yes
      register: pulled_image

    - name: Get image ID of the latest pulled image
      shell: docker inspect --format='{{ "{{.Id}}" }}' {{ portainer_image }}:{{ portainer_tag }}
      register: latest_image_id
      changed_when: false

    - name: Check if Portainer container exists
      command: docker ps -a -q -f name={{ portainer_container_name }}
      register: container_exists
      changed_when: false

    - name: Get image ID of the currently running container
      shell: docker inspect --format='{{ "{{.Image}}" }}' {{ portainer_container_name }}
      register: container_image_id
      when: container_exists.stdout != ""
      changed_when: false
      failed_when: false

    - name: Determine if container needs recreation
      set_fact:
        recreate_container: >-
          {{ container_exists.stdout == "" or latest_image_id.stdout != container_image_id.stdout | default('') }}

    - name: Show image ID comparison
      debug:
        msg:
          - "Latest image ID: {{ latest_image_id.stdout }}"
          - "Running container image ID: {{ container_image_id.stdout | default('N/A') }}"
          - "Recreate container: {{ recreate_container }}"

    - name: Stop and remove existing Portainer container
      docker_container:
        name: "{{ portainer_container_name }}"
        state: absent
      when: recreate_container | bool and container_exists.stdout != ""

    - name: Run Portainer CE container
      docker_container:
        name: "{{ portainer_container_name }}"
        image: "{{ portainer_image }}:{{ portainer_tag }}"
        ports:
          - "{{ portainer_http_port }}:{{ portainer_http_port }}"
          - "{{ portainer_https_port }}:{{ portainer_https_port }}"
        volumes:
          - "{{ docker_socket }}:{{ docker_socket }}"
          - "{{ portainer_data_volume }}:/data"
        detach: true
        restart_policy: always
      when: recreate_container | bool

    - name: Final confirmation
      debug:
        msg:
          - "Portainer container {{ 'was recreated with new image' if recreate_container else 'is already up-to-date' }}."
