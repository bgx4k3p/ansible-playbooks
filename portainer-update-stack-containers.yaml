---
- name: Update specified Portainer stacks with the latest container images
  hosts: localhost
  gather_facts: false
  vars:
    portainer_url: '{{ portainer_url }}'  # Replace with your Portainer URL, i.e. "https://192.168.1.31:9443/" 
    validate_certs: false                 # Set to true if your Portainer has a valid SSL certificate
    stacks_to_update: '{{ stacks_to_update | default([]) }}'  # List of stack names to update

  tasks:
    - name: Check if stacks_to_update is provided
      debug:
        msg: "No stacks specified in stacks_to_update. No action will be taken."
      when: stacks_to_update | length == 0
      
    - name: Exit playbook if no stacks provided
      meta: end_play
      when: stacks_to_update | length == 0

    - name: Get all stacks from Portainer
      uri:
        url: "{{ portainer_url }}/api/stacks"
        method: GET
        headers:
          X-API-Key: "{{ api_key }}"
        return_content: yes
        validate_certs: "{{ validate_certs }}"
      register: stacks_response
      failed_when: stacks_response.status >= 400

    - name: Filter stacks to update
      set_fact:
        filtered_stacks: "{{ stacks_response.json | selectattr('Name', 'in', stacks_to_update) | list }}"

    - name: Show stacks to be processed
      debug:
        msg: "Will process stack: {{ item.Name }}"
      loop: "{{ filtered_stacks }}"

    - name: Check if any matching stacks were found
      debug:
        msg: "Warning: None of the specified stacks were found in Portainer."
      when: filtered_stacks | length == 0

    - name: Exit playbook if no matching stacks found
      meta: end_play
      when: filtered_stacks | length == 0

    - name: Process selected stacks
      block:
        - name: Get stack details
          uri:
            url: "{{ portainer_url }}/api/stacks/{{ item.Id }}"
            method: GET
            headers:
              X-API-Key: "{{ api_key }}"
            return_content: yes
            validate_certs: "{{ validate_certs }}"
          register: stack_details

        - name: Parse compose file
          set_fact:
            compose_content: "{{ stack_details.json.Content | from_yaml }}"
          ignore_errors: yes

        - name: Extract service images
          set_fact:
            service_images: []
          changed_when: false

        - name: Build service images list
          set_fact:
            service_images: "{{ service_images + [{'name': service.key, 'image': service.value.image}] }}"
          loop: "{{ compose_content.services | default({}) | dict2items }}"
          loop_control:
            loop_var: service
          when: service.value.image is defined
          
        - name: Process each service
          block:
            - name: Extract image name and tag
              set_fact:
                image_name: "{{ service_item.image.split(':')[0] }}"
                image_tag: "{{ service_item.image.split(':')[1] | default('latest') }}"

            - name: Pull latest image
              docker_image:
                name: "{{ image_name }}"
                tag: "{{ image_tag }}"
                source: pull
                force_source: yes

            - name: Get image ID of the latest pulled image
              shell: docker inspect --format='{{ "{{.Id}}" }}' {{ image_name }}:{{ image_tag }}
              register: latest_image_id
              changed_when: false

            - name: Get current container ID
              shell: docker ps -q --filter name={{ item.Name }}_{{ service_item.name }}
              register: container_id
              changed_when: false
              failed_when: false

            - name: Skip update check if no container running
              set_fact:
                update_service: true
              when: container_id.stdout == ""

            - name: Get current container image ID
              shell: docker inspect --format='{{ "{{.Image}}" }}' {{ container_id.stdout_lines[0] }}
              register: container_image_id
              when: container_id.stdout != ""
              failed_when: false

            - name: Compare image IDs
              set_fact:
                update_service: "{{ latest_image_id.stdout != container_image_id.stdout | default('') }}"
              when: container_id.stdout != ""

            - name: Show update status
              debug:
                msg: 
                  - "Stack: {{ item.Name }} - Service: {{ service_item.name }} - Image: {{ service_item.image }}"
                  - "Current image: {{ container_image_id.stdout | default('Not running') }}"
                  - "Latest image: {{ latest_image_id.stdout }}"
                  - "Update needed: {{ update_service }}"

          loop: "{{ service_images }}"
          loop_control:
            loop_var: service_item
            label: "{{ item.Name }} - {{ service_item.name }}"

        # Update stack only once if any service needs updating
        - name: Check if any service needs update
          set_fact:
            stack_needs_update: "{{ service_images | selectattr('needs_update', 'defined') | selectattr('needs_update') | list | length > 0 }}"
          
        - name: Update stack if needed
          uri:
            url: "{{ portainer_url }}/api/stacks/{{ item.Id }}"
            method: PUT
            headers:
              X-API-Key: "{{ api_key }}"
            body_format: json
            body:
              stackFileContent: "{{ stack_details.json.Content }}"
              env: "{{ stack_details.json.Env | default([]) }}"
              prune: true
              pullImage: true
            validate_certs: "{{ validate_certs }}"
          register: update_result
          when: stack_needs_update | default(true)

        - name: Report update status
          debug:
            msg: "Stack {{ item.Name }} {{ 'has been updated' if update_result.status is defined and update_result.status < 400 else 'did not need updating' }}"
          
      loop: "{{ filtered_stacks }}"
      loop_control:
        label: "{{ item.Name }}"
  