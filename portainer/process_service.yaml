---
# process_service.yaml - Process a service and update if needed

- name: Set service variables
  set_fact:
    service_name: "{{ service_item.key }}"
    service_config: "{{ service_item.value }}"
    service_updated: false

- name: Check if service has image
  set_fact:
    current_image: "{{ service_config.image | default('') }}"
    
- name: Skip if no image defined
  meta: end_play
  when: current_image == ''

- name: Split image name and tag
  set_fact:
    image_repository: "{{ current_image.split(':')[0] }}"
    image_tag: "{{ current_image.split(':')[1] | default('latest') }}"

- name: Log service being processed
  debug:
    msg: "Service: {{ service_name }}, Image: {{ current_image }}"

- name: Skip if already using latest tag
  meta: end_play
  when: image_tag == 'latest'

- name: Pull latest image via Portainer API
  uri:
    url: "{{ portainer_url }}/api/endpoints/{{ endpoint_id }}/docker/images/create?fromImage={{ image_repository }}&tag=latest"
    method: POST
    headers: "{{ headers }}"
    validate_certs: "{{ verify_ssl }}"
    status_code: [200, 201, 204]
    timeout: 300
  register: pull_result
  ignore_errors: yes

# Fix for the syntax error in the combine filter
- name: Create updated service config
  set_fact:
    updated_service_config: "{{ service_config | combine({'image': image_repository + ':latest'}) }}"
    service_updated: true
  when: pull_result.status | default(0) in [200, 201, 204]

- name: Create updated compose
  set_fact:
    updated_services: "{{ {service_name: updated_service_config} }}"
    updated_compose: "{{ compose_yaml | combine({'services': {service_name: updated_service_config}}, recursive=true) }}"
  when: service_updated|bool

- name: Convert updated compose to YAML
  set_fact:
    updated_stack_content: "{{ updated_compose | to_yaml }}"
  when: service_updated|bool

- name: Update stack in Portainer
  uri:
    url: "{{ portainer_url }}/api/stacks/{{ stack_id }}?endpointId={{ endpoint_id }}"
    method: PUT
    headers: "{{ headers }}"
    validate_certs: "{{ verify_ssl }}"
    body_format: json
    body:
      StackFileContent: "{{ updated_stack_content }}"
      Env: "{{ stack_env_vars }}"
      Prune: true
      endpointId: "{{ endpoint_id }}"
    status_code: [200, 201, 204]
    timeout: 600
  register: update_result
  when: service_updated|bool
  ignore_errors: yes

- name: Log update result
  debug:
    msg: "{{ 'Successfully updated' if update_result.status|default(0) in [200, 201, 204] else 'Failed to update' }} stack '{{ stack_name }}', service '{{ service_name }}' to {{ image_repository }}:latest"
  when: service_updated|bool